```@meta
CurrentModule = Antique
```

# Morse Potential

The Morse potential is a model for inter-nuclear anharmonic vibration in a diatomic molecule.

## Definitions

This model is described with the time-independent Schrödinger equation
```math
  \hat{H} \psi(r) = E \psi(r),
```
and the Hamiltonian
```math
  \hat{H} = - \frac{\hbar^2}{2\mu} \frac{\mathrm{d}^2}{\mathrm{d}r ^2} + V(r)
```
Parameters are specified with the following struct.

#### Parameters
```@docs; canonical=false
Antique.MorsePotential
```

#### Potential
```@docs; canonical=false
Antique.V(::MorsePotential, ::Any)
```

#### Eigen Values
```@docs; canonical=false
Antique.E(::MorsePotential)
```

#### Number of Bound States
```@docs; canonical=false
Antique.nₘₐₓ(::MorsePotential)
```

#### Eigen Functions
```@docs; canonical=false
Antique.ψ(::MorsePotential, ::Any)
```

#### Generalized Laguerre Polynomials
```@docs; canonical=false
Antique.L(::MorsePotential, ::Any)
```

#### References
- [P. M. Morse, Phys. Rev. 34, 57 (1929)](https://doi.org/10.1103/PhysRev.34.57)
- [J. P. Dahl, M. Springborg, J. Chem. Phys. 88, 4535 (1988). (62), (63)](https://doi.org/10.1063/1.453761)
- [W. K. Shao, Y. He, J. Pan, J. Nonlinear Sci. Appl., 9, 5, 3388 (2016). (1.6)](http://dx.doi.org/10.22436/jnsa.009.05.124) 
- The Digital Library of Mathematical Functions (DLMF) [18.3 Table1](https://dlmf.nist.gov/18.3#T1), [18.5 Table1](https://dlmf.nist.gov/18.5#T1), [18.5.12](https://dlmf.nist.gov/18.5#E12)

## Usage & Examples

[Install Antique.jl](@ref Install) for the first use and run `using Antique` before each use. The energy `E()`, wavefunction `ψ()`, potential `V()` and some other functions are suppoted. In this system, the model is generated by `MorsePotential` and several parameters `rₑ`, `Dₑ`, `k`, `µ` and `ℏ` are set as optional arguments.

```julia; cache = :all; results = "hidden"
# Parameters for H₂⁺
# https://doi.org/10.1002/slct.202102509
# https://doi.org/10.5281/zenodo.5047817
# https://physics.nist.gov/cgi-bin/cuu/Value?mpsme
rₑ =  1.997193319969992120068298141276
Dₑ = - 0.5 - (-0.602634619106539878727562156289)
k = 2*((-1.1026342144949464615+1/2.00) - (-0.602634619106539878727562156289)) / (2.00 - rₑ)^2
µ = 1/(1/1836.15267343 + 1/1836.15267343)
ℏ = 1.0

using Antique
MP = MorsePotential(rₑ=rₑ, Dₑ=Dₑ, k=k, µ=µ, ℏ=ℏ)
```

Parameters:

```julia; term = true
MP.rₑ
MP.Dₑ
MP.k
MP.µ
MP.ℏ
```

Eigen values:

```julia; term = true
E(MP, n=0)
E(MP, n=1)
```

Potential energy curve:

```julia
using Plots
plot(0.1:0.01:15, r -> V(MP, r), lw=2, label="", xlims=(0.1,9.1), ylims=(-0.11,0.01), xlabel="r", ylabel="V(r)")
```

Wave functions:

```julia
using Plots
plot(xlim=(0,5), xlabel="x", ylabel="ψ(x)")
plot!(x -> ψ(MP, x, n=0), label="n=0", lw=2)
plot!(x -> ψ(MP, x, n=1), label="n=1", lw=2)
plot!(x -> ψ(MP, x, n=2), label="n=2", lw=2)
plot!(x -> ψ(MP, x, n=3), label="n=3", lw=2)
plot!(x -> ψ(MP, x, n=4), label="n=4", lw=2)
plot!(x -> ψ(MP, x, n=5), label="n=5", lw=2)
```

Potential energy curve, Energy levels, Comparison with harmonic oscillator:

```julia
MP = MorsePotential()
HO = HarmonicOscillator(k=MP.k, m=MP.μ)
using Plots
plot(xlims=(0.1,9.1), ylims=(-0.11,0.01), xlabel="\$r\$", ylabel="\$V(r), E_n\$", legend=:bottomright, size=(480,400), dpi=300)
for n in 0:nₘₐₓ(MP)
  # energy
  EM = E(MP, n=n)
  EH = E(HO, n=n) - MP.Dₑ
  plot!(0.1:0.01:15, r -> EH > V(HO, r-MP.rₑ) - MP.Dₑ ? EH : NaN, lc="#BC1C5F", lw=1, label="")
  plot!(0.1:0.01:15, r -> EM > V(MP, r) ? EM : NaN, lc="#578FC7", lw=1, label="")
end
# potential
plot!(0.1:0.01:15, r -> V(HO, r-MP.rₑ) - MP.Dₑ, lc="#BC1C5F", lw=2, label="Harmonic Oscillator")
plot!(0.1:0.01:15, r -> V(MP, r), lc="#578FC7", lw=2, label="Morse Potential")
```

where, the potential of harmonic oscillator is defined as $V(r) \simeq \frac{1}{2} k (r - r_\mathrm{e})^2 + V_0$.

## Testing

Unit testing and Integration testing were done using computer algebra system ([Symbolics.jl](https://symbolics.juliasymbolics.org/stable/)) and numerical integration ([QuadGK.jl](https://juliamath.github.io/QuadGK.jl/stable/)). The test script is [here](https://github.com/ohno/Antique.jl/blob/main/test/MorsePotential.jl).

```julia; line_width = 500
println(Antique.load("../../test/result/MorsePotential.log"))
```